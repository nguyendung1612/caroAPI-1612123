#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('caroapi:server');
var http = require('http');
var _findIndex = require('lodash/findIndex');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4040');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
8080;

/**
 * Listen on provided port, on all network interfaces.
 */

var io = require('socket.io').listen(server);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var mangUsers = [];

io.on('connection', socket => {
  //Sv listen, bien data client gui len
  socket.on('send-username', data => {
    socket.emit('id', socket.id);
    // io.sockets.emit('Server-send-data', data);//sv gui lai tat ca client
    // socket.emit('Server-send-data', data); //sv chi gui lai thang phat
    // socket.broadcast.emit('Server-send-data', data); //gui cho nhung client con lai
    var index = mangUsers.indexOf(data);
    if (index < 0) {
      mangUsers.push(data);
      socket.Username = data;
      index = mangUsers.indexOf(data);
      console.log(mangUsers, index);
    }

    var div = Math.floor(index / 2);
    var mod = index % 2;
    socket.Host = mod === 1 ? true : false;
    socket.join(`room${div}`);
    socket.Phong = `room${div}`;

    if (mangUsers.length === 2) {
      mangUsers = [];
      socket.emit('server-send-success', data);
    }

    console.log(socket.adapter.rooms); //room cua socket
  });

  socket.emit('host', socket.Host);

  socket.on('client-send-mess', data => {
    //gửi lại tin nhắn cho tất cả các user dang online
    io.in(socket.Phong).emit('sv-send-mess', {
      data: data,
      id: socket.id
    });
  });

  socket.on('host-send-pos', data => {
    console.log(data);
    socket.to(socket.Phong).emit('sv-send-pos', {
      X: data.X,
      Y: data.Y,
      data: data.data,
      turn: false
    });
  });

  socket.on('guest-send-pos', data => {
    console.log(data);
    socket.to(socket.Phong).emit('sv-send-pos', {
      X: data.X,
      Y: data.Y,
      data: data.data,
      turn: true
    });
  });

  socket.on('exit', () => {
    socket.disconnect();
  });

  socket.on('disconnect', () => {
    console.log('disconnect');
  });
});
